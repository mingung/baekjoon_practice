module alu1bit (reset, a, b, aen, binv, cin, cout, sum);
input reset, a, b, aen, binv, cin;
output cout, sum;
wire x0, x01, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10;

assign x0 = !(b & !binv); // AND = NOT - NOR
assign x01 = !(!b & binv); // AND = NOT - NOR
assign x1 = !(x0 & x01); // OR = NOT - NAND
assign x2 = !(!a | !aen); // AND = NOT - NOR
assign x3 = !(x1 & x2);
assign x4 = !(x1 & x3);
assign x5 = !(x2 & x3);
assign x6 = !(x4 & x5);
assign x7 = !(cin & x6);
assign x8 = !(cin & x7);
assign x9 = !(x7 & x6);
assign x10 = !(x8 & x9);
assign cout = !(x7 & x3);
assign sum = (x10 & !reset);
endmodule

// /******Sum = and gate*******************/
// /*******************************************************************************/
// /******Sum = nand-and gate**************/
//  module alu1bit (reset, a, b, aen, binv, cin, cout, sum);
// input reset, a, b, aen, binv, cin;
// output cout, sum;
// wire x0, x01, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11;

// assign x0 = !(b & !binv); // AND = NOT - NOR
// assign x01 = !(!b & binv); // AND = NOT - NOR
// assign x1 = !(x0 & x01); // OR = NOT - NAND
// assign x2 = !(!a | !aen); // AND = NOT - NOR
// assign x3 = !(x1 & x2);
// assign x4 = !(x1 & x3);
// assign x5 = !(x2 & x3);
// assign x6 = !(x4 & x5);
// assign x7 = !(cin & x6);
// assign x8 = !(cin & x7);
// assign x9 = !(x7 & x6);
// assign x10 = !(x8 & x9);
// assign cout = !(x7 & x3);
// assign x11 = !(x10 & !reset);
// assign sum = !x11;

// endmodule


// // compile 시 자동적으로 nand-and 게이트는 and게이트로 처리해서 logic elements가 같다.